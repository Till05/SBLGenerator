// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float1> Result;

int resAmplifier;
int Resolution;

float scale;
float strength;
int octaves;
float lacunarity;
float percistance;


Texture2D<float1> Input;

float random (float2 st) {
    return frac(sin(dot(st.xy,
                         float2(12.9898,78.233)))*43758.5453123);
}

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (float2 st) {
    float2 i = floor(st);
    float2 f = frac(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + float2(1.0, 0.0));
    float c = random(i + float2(0.0, 1.0));
    float d = random(i + float2(1.0, 1.0));

    float2 u = f * f * (3.0 - 2.0 * f);

    return (a * (1 - u.x) + b * u.x) * (1 - u.y) + (c * (1 - u.x) + d * u.x) * u.y;
}

float fbm (float2 st) {
    // Initial values
    float value = 0.0;
    float amplitude = .5;
    float frequency = 0.;
    //
    // Loop of octaves
    for (int i = 0; i < 6; i++) {
        value += amplitude * noise(st);
        st *= lacunarity;
        amplitude *= percistance;
    }
    return value;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x = id.x / Resolution;
    float y = id.y / Resolution;

    float2 coords = id.xy/float(resAmplifier);
    float2 f = floor(coords);
    float2 s = frac(coords);

    float corner1 = Input[f];
    float corner2 = Input[f + float2(1, 0)];
    float corner3 = Input[f + float2(0, 1)];
    float corner4 = Input[f + float2(1, 1)];

    float result = (corner1 * (1 - s.x) + corner2 * s.x) * (1 - s.y) + (corner3 * (1 - s.x) + corner4 * s.x) * s.y;

    Result[id.xy] = result + fbm(coords * scale) * strength;
}

