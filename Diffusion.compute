// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Relax
#pragma kernel Apply
#pragma kernel Initialise

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float1> TempTex;
RWTexture2D<float1> Result;

Texture2D<float1> Input;
Texture2D<float1> SourceMask;

float h;

[numthreads(8,8,1)]
void Relax (uint3 id : SV_DispatchThreadID)
{
    float current = Result[id.xy + int2(1, 1)];
    float left = Result[id.xy + int2(0, 1)];
    float right = Result[id.xy + int2(2, 1)];
    float up = Result[id.xy + int2(1, 0)];
    float down = Result[id.xy + int2(1, 2)];

    if (SourceMask[id.xy + int2(1,1)] > 0)
    {
        TempTex[id.xy] = 0.25*(up + down + left + right + h*h*Input[id.xy + int2(1, 1)]);
    }
    else
    {
        TempTex[id.xy] = Input[id.xy + int2(1, 1)];
    }
}

[numthreads(8,8,1)]
void Apply (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy + int2(1, 1)] = TempTex[id.xy];
}

[numthreads(8,8,1)]
void Initialise (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = Input[id.xy];
}
